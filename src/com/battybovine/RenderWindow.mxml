<?xml version="1.0" encoding="utf-8"?>
<!--[CDATA[
 * Copyright (c) 2012 Jamie Greunbaum
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
]]>-->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="openEvent()"
			   close="cancelAllClicked()">
	
	<fx:Script>
		<![CDATA[
			import com.battybovine.codec.*;
			import com.battybovine.RenderWindow.SwfData;
			import flash.geom.Point;
			import flash.geom.Rectangle;
			
			import flash.display.Bitmap;
			import flash.display.BitmapData;
			import flash.display.Loader;
			import flash.display.MovieClip;
			import flash.events.Event;
			import flash.filesystem.File;
			import flash.filesystem.FileStream;
			import flash.media.SoundTransform;
			import flash.net.URLRequest;
			import flash.utils.Timer;
			import flash.events.TimerEvent;
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			
			
			private static const QUEUE_RECEIVED:String = "QueueReceived";
			private static const INIT_COMPLETE:String = "InitialisationComplete";
			private static const QUEUE_PROCESSED:String = "QueueProcessed";
			private static const RENDER_PREPARATION_COMPLETE:String = "RenderPreparationComplete";
			private static const NEXT_FILE_OPENED:String = "NextFileOpened"
			private static const PREVIEW_UPDATED:String = "PreviewUpdated";
			private static const RENDER_NEXT_FRAME:String = "RenderNextFrame";
			private static const RENDER_COMPLETE:String = "RenderComplete";
			private static const RENDER_CANCELLED:String = "RenderCancelled";
			private static const CANCEL_ALL_RENDERS:String = "AllRendersCancelled";
			
			
			
			private var prefsman:PreferencesManager = new PreferencesManager();
			
			private var tempfilequeue:Array = null;
			private var tempdata:SwfData;
			
			private var filequeue:Array = null;
			private var renderswf:MovieClip = new MovieClip();
			
			private var imageencoder:IThreadedImageEncoder = null;
			
			
			
			// Add a timer to check for the list of files
			private function openEvent():void {
				// Set up all of our event listeners
				this.addEventListener(RenderWindow.QUEUE_RECEIVED, startRender);
				this.addEventListener(RenderWindow.INIT_COMPLETE, openSwfData);
				this.addEventListener(RenderWindow.QUEUE_PROCESSED, handleEvents);
				this.addEventListener(RenderWindow.RENDER_PREPARATION_COMPLETE, handleEvents);
				this.addEventListener(RenderWindow.NEXT_FILE_OPENED, handleEvents);
				this.addEventListener(RenderWindow.PREVIEW_UPDATED, handleEvents);
				this.addEventListener(RenderWindow.RENDER_NEXT_FRAME, handleEvents);
				this.addEventListener(RenderWindow.RENDER_COMPLETE, handleEvents);
				this.addEventListener(RenderWindow.RENDER_CANCELLED, handleEvents);
				this.addEventListener(RenderWindow.CANCEL_ALL_RENDERS, handleEvents);
			}
			
			// Get the list of files from the main application window
			public function loadFiles(input:Array):void {
				tempfilequeue = input;
				this.dispatchEvent(new Event(QUEUE_RECEIVED));
			}
			
			// Begin rendering
			public function startRender(e:Event = null):void {
				// Create our filequeue variable to permanently store file data
				filequeue = new Array();
				
				// Fail if the preferences can't be loaded
				prefsman.load();
				if (!prefsman.preferencesLoaded()) {
					trace("Preferences could not be loaded; not rendering a damn thing.");
					this.closeEvent();
				}
				
				// Resize the preview image container based on the render dimensions
				var newsize:int = ((previewImage.height * prefsman.getOutputWidth()) / prefsman.getOutputHeight());
				if (newsize <= previewImage.maxWidth) {
					previewImage.width = newsize;
				} else {
					newsize = ((previewImage.width * prefsman.getOutputHeight()) / prefsman.getOutputWidth());
					previewImage.height = newsize;
				}
				
				// If all is well and good, start opening the SWF for collecting data
				progressBarCurrent.label = "Processing...";
				progressBarTotal.label = "Processing...";
				this.dispatchEvent(new Event(INIT_COMPLETE));
			}
			
			// Load each SWF in succession
			private function openSwfData(e:Event = null):void {
				if (tempfilequeue.length > 0) {
					// Open each file in the temporary queue to collect additional data
					tempdata = new SwfData()
					var loader:Loader = new Loader();
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadSwfData);
					var fLoader:ForcibleLoader = new ForcibleLoader(loader);
					fLoader.load(new URLRequest(tempfilequeue[0]));
					tempdata.file = tempfilequeue[0];
				} else {
					// Once the temporary queue is empty, begin the rendering process
					this.dispatchEvent(new Event(QUEUE_PROCESSED));
				}
			}
			// Listener for loaded SWF data
			private function loadSwfData(e:Event = null):void {
				// Load the movie clip and stop it from playing
				var swf:MovieClip = e.currentTarget.content as MovieClip;
				swf.soundTransform = new SoundTransform(0,0);
				swf.gotoAndStop(1);
				
				// Add some useful information to our container class
				tempdata.numFrames = swf.totalFrames;
				tempdata.numScenes = swf.scenes.length;
				
				trace(tempdata.file + " contains " + swf.totalFrames + " frames");
				
				// Push the data class into our permanent queue, and remove
				// the recently processed file from the temporary queue
				filequeue.push(new SwfData(tempdata));
				tempfilequeue.shift();
				tempdata.empty();
				
				// Then restart the process until the temp queue is empty
				this.dispatchEvent(new Event(INIT_COMPLETE));
			}
			
			// Start preparing for the render process
			private function prepareForRender(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, prepareForRender);
				
				// Collect the total number of frames in each loaded SWF
				var totalframes:int = 0;
				for each(var data:SwfData in filequeue) {
					totalframes += data.numFrames;
				}
				// Set the total progress maximum appropriately
				progressBarTotal.maximum = totalframes;
				progressBarTotal.indeterminate = false;
				trace("Progress bar set for " + progressBarTotal.maximum + " frames.");
				progressBarTotal.setProgress(0, progressBarTotal.maximum);
				progressBarTotal.label = "Total: %3%%";
				
				// Enable the Cancel All button here, and make sure Cancel Current is disabled for now
				cancelAll.enabled = true;
				cancelCurrent.enabled = false;
				
				// Now we can begin rendering
				this.dispatchEvent(new Event(RENDER_PREPARATION_COMPLETE));
			}
			
			// Begin the rendering process for all files
			private function renderNextFile(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, renderNextFile);
				
				// Load the first file in the queue as our next file to render
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, renderSwfOpen);
				var fLoader:ForcibleLoader = new ForcibleLoader(loader);
				fLoader.load(new URLRequest(filequeue[0].file));
			}
			// Listener for loaded SWFs
			private function renderSwfOpen(e:Event):void {
				// Set the dimensions and source of the SWF Loader
				loadedSWF.width = e.currentTarget.width;
				loadedSWF.height = e.currentTarget.height;
				loadedSWF.source = e.currentTarget.content;
				
				// Initialise the SWF controller and prepare event listeners
				renderswf = e.currentTarget.content as MovieClip;
				renderswf.soundTransform = new SoundTransform(0,0);
				renderswf.gotoAndStop(1);
				
				// Configure the progress bar appropriately
				var nextfile:File = new File(filequeue[0].file);
				progressBarCurrent.label = nextfile.name + ": %3%%";
				progressBarCurrent.maximum = filequeue[0].numFrames;
				progressBarCurrent.indeterminate = false;
				progressBarCurrent.setProgress(0, progressBarCurrent.maximum);
			
				// Enable the Cancel Current button
				cancelCurrent.enabled = true;
				
				this.dispatchEvent(new Event(NEXT_FILE_OPENED));
			}
			// Function for generating the preview image
			private function updateCapturedImage(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, updateCapturedImage);
				previewImage.source = captureSWFFrame(loadedSWF, previewImage.width, previewImage.height, prefsman.getAspect());
				this.dispatchEvent(new Event(PREVIEW_UPDATED));
			}
			// Start rendering the current frame
			private function renderSWFFrame(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, renderSWFFrame);
				
				// Create the render directory
				var renderfile:File = new File(filequeue[0].file);
				var outdirfull:File = new File(prefsman.getOutputDirectory()+File.separator+renderfile.name.replace("."+renderfile.extension,""));
				outdirfull.createDirectory();
				
				// Capture the current loaded SWF frame
				beginRenderToFile(captureSWFFrame(loadedSWF, prefsman.getOutputWidth(), prefsman.getOutputHeight(), prefsman.getAspect()), outdirfull.nativePath, renderfile.name.replace("." + renderfile.extension, ""), prefsman.getOutputFormat(), prefsman.getOutputQuality());
			}
			// Save the captured image to disk using the given format/quality settings
			private function beginRenderToFile(bm:Bitmap, folder:String, filename:String = "out", format:int = 0, jpegquality:int = 80):void {
				// Find the number of digits in the frame count and pad the current frame to that length
				var j:int = filequeue[0].numFrames;
				for (var i:int = 1; j >= 10; i++ ) { j /= 10; }
				var framepad:String = "" + renderswf.currentFrame;
				while (framepad.length < i) { framepad = "0" + framepad; }
				
				// Save the image
				var ext:String;
				switch(format) {
					default:
						ext = "png";
						break;
					case 1:
						ext = "jpg";
						break;
					case 2:
						ext = "tga";
						break;
				}
				var savename:String = filename + "." + framepad + "." + ext;
				trace("Outputting " + bm.width + "×" + bm.height + " frame capture to " + folder + File.separator + savename + "...");
				try {
					switch(ext) {
						case "png":
							imageencoder = new PNGThreadedEncoder();
							break;
						case "jpg":
						case "jpeg":
							imageencoder = new JPEGThreadedEncoder(jpegquality);
							break;
						case "tga":
							imageencoder = new TGAThreadedEncoder();
							break;
						default:
							trace("Can't find an appropriate image encoder; defaulting to PNG");
							imageencoder = new PNGThreadedEncoder();
					}
					// Prepare the encoding thread's events
					imageencoder.setFilePath(folder + File.separator + savename);
					imageencoder.setFrameRate(1);
					imageencoder.setAffinity(100);
					imageencoder.addEventListener(ThreadedEncoderEvent.START_ENCODE, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.HEADER_WRITTEN, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.DATA_CHUNK_WRITTEN, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.COMPLETE_DATA_WRITTEN, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.FOOTER_WRITTEN, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.ENCODE_COMPLETE, handleEvents);
					imageencoder.addEventListener(ThreadedEncoderEvent.ENCODE_CANCELLED, handleEvents);
					imageencoder.encode(bm.bitmapData);
				} catch (e:Error) {
					trace(e.message);
				}
			}
			private function saveToFile(e:Event):void {
				try {
					var out:File = new File(imageencoder.getFilePath());
					var fs:FileStream = new FileStream();
					fs.open(out, FileMode.WRITE);
					fs.writeBytes(imageencoder.getEncodedImage());
					fs.close();
				} catch (e:Error) {
					trace(e.message);
					return;
				}
				
				// We're done here
				imageencoder.finish();
			}
			private function handleEvents(e:Event):void {
				switch(e.type) {
					case QUEUE_PROCESSED:
						this.addEventListener(Event.EXIT_FRAME, prepareForRender);
						break;
					case RENDER_PREPARATION_COMPLETE:
						this.addEventListener(Event.EXIT_FRAME, renderNextFile);
						break;
					case NEXT_FILE_OPENED:
					case RENDER_NEXT_FRAME:
						this.addEventListener(Event.EXIT_FRAME, updateCapturedImage);
						break;
					case PREVIEW_UPDATED:
						this.addEventListener(Event.EXIT_FRAME, renderSWFFrame);
						break;
					case RENDER_CANCELLED:
					case RENDER_COMPLETE:
						this.addEventListener(Event.EXIT_FRAME, cleanUpCurrentRender);
						break;
					case CANCEL_ALL_RENDERS:
						this.cancelAllRenders();
						break;
					
					case ThreadedEncoderEvent.START_ENCODE:
						this.addEventListener(Event.EXIT_FRAME, imageencoder.writeHeader);
						break;
					case ThreadedEncoderEvent.HEADER_WRITTEN:
						this.removeEventListener(Event.EXIT_FRAME, imageencoder.writeHeader);
					case ThreadedEncoderEvent.DATA_CHUNK_WRITTEN:
						callLater(imageencoder.writeDataLoop);
						break;
					case ThreadedEncoderEvent.COMPLETE_DATA_WRITTEN:
						this.removeEventListener(Event.EXIT_FRAME, imageencoder.writeDataLoop);
						this.addEventListener(Event.EXIT_FRAME, imageencoder.writeFooter);
						break;
					case ThreadedEncoderEvent.FOOTER_WRITTEN:
						this.removeEventListener(Event.EXIT_FRAME, imageencoder.writeFooter);
						this.addEventListener(Event.EXIT_FRAME, this.saveToFile);
						break;
					case ThreadedEncoderEvent.ENCODE_COMPLETE:
						this.removeEventListener(Event.EXIT_FRAME, this.saveToFile);
						this.addEventListener(Event.EXIT_FRAME, prepareNextFrame);
						break;
					case ThreadedEncoderEvent.ENCODE_CANCELLED:
						//this.cancelCurrentRender();
						break;
					default:
						trace("Not handling event " + e.type);
				}
			}
			// Update the progress bars and increment the current frame
			private function prepareNextFrame(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, prepareNextFrame);
				
				// Only continue if we haven't exhausted all frames in the SWF file
				progressBarCurrent.setProgress(renderswf.currentFrame, progressBarCurrent.maximum);
				progressBarTotal.setProgress(progressBarTotal.value + 1, progressBarTotal.maximum);
				if ((renderswf.currentFrame) < renderswf.totalFrames) {
					renderswf.gotoAndStop(renderswf.currentFrame + 1);
					this.dispatchEvent(new Event(RENDER_NEXT_FRAME));
				} else {
					this.dispatchEvent(new Event(RENDER_COMPLETE));
				}
			}
			private function cleanUpCurrentRender(e:Event = null):void {
				this.removeEventListener(Event.EXIT_FRAME, cleanUpCurrentRender);
				
				// Make sure the image encoder object is cleaned up properly
				this.deleteImageEncoder();
				
				// Unregister everything
				loadedSWF.unloadAndStop();
				// Set the progress bars to the proper final values here
				progressBarCurrent.setProgress(renderswf.totalFrames, progressBarCurrent.maximum);
				progressBarTotal.setProgress(progressBarTotal.value + (renderswf.totalFrames - renderswf.currentFrame), progressBarTotal.maximum);
				if(filequeue) {
					// Remove the first file in the queue, pushing the next file to the top
					filequeue.shift();
					// If there are new files, keep going; otherwise, quit
					if(filequeue.length>0) {
						this.dispatchEvent(new Event(RENDER_PREPARATION_COMPLETE));
					} else {
						this.closeEvent();
					}
				} else {
					this.closeEvent();
				}
			}
			
			// Capture the current frame of the given SWFLoader object at the given dimensions and aspect ratio
			public static function captureSWFFrame(swf:SWFLoader, capturewidth:int, captureheight:int, aspect:String = ""):Bitmap {
				// Default settings appropriate for scaling to the output size
				var fitaspect:Boolean = true;
				var aspectcrop:Boolean = false;
				var noscale:Boolean = false;
				switch(aspect.toLowerCase()) {
					case "letterboxing":
						fitaspect = false;
						aspectcrop = false;
						break;
					case "cropping":
						fitaspect = true;
						aspectcrop = true;
						break;
					case "not changing the size":
						fitaspect = false;
						aspectcrop = false;
						noscale = true;
				}
				
				var scalex:Number = 1;
				var scaley:Number = 1;
				
				if(!noscale) {
					if(!fitaspect && !aspectcrop) {	// If we're letterboxing the final image
						// ...calculate the desired scale of our image based on the dimension that is proportionally smaller than the desired output resolution
						scalex = scaley = (((swf.height * capturewidth) / captureheight) >= swf.width)
							? (captureheight / swf.height)
							: (capturewidth / swf.width);
					} else if(!fitaspect || aspectcrop) {	// If we're doing anything else but scaling the final image...
						// ...calculate the desired scale of our image based on the dimension that is proportionally larger than the desired output resolution
						scalex = scaley = (((swf.height * capturewidth) / captureheight) >= swf.width)
							? (capturewidth / swf.width)
							: (captureheight / swf.height);
					} else {	// If we're scaling the final output of the image...
						// ...scale each side of the SWF to match the dimensions of our output image
						scalex = capturewidth / swf.width;
						scaley = captureheight / swf.height;
					}
				} else {
					scalex = scaley = 1;
				}
				
				// Create a new bitmap containing a scaled version of our SWF
				var bd:BitmapData = new BitmapData(swf.width*scalex, swf.height*scaley, true);
				var scalematrix:Matrix = new Matrix(scalex, 0, 0, scaley);
				bd.draw(swf, scalematrix);
				
				var bm:Bitmap = null;
				if(fitaspect && aspectcrop) {	// If we're cropping the image to fit the output...
					// ...create a new bitmap at the desired size, and copy our oversized image to it
					var crop:Rectangle = new Rectangle(((swf.width * scalex) - capturewidth) / 2, ((swf.height * scaley) - captureheight) / 2, capturewidth, captureheight);
					var bdcrop:BitmapData = new BitmapData(crop.width, crop.height, false, 0);
					bdcrop.copyPixels(bd, crop, new Point(0, 0));
					bm = new Bitmap(bdcrop);
				} else if(!fitaspect && !aspectcrop && !noscale) {	// If we're letterboxing the output...
					// ...create an oversized bitmap canvas to copy the image onto
					var letterbox:Rectangle = new Rectangle(0, 0, (swf.width * scalex), (swf.height * scaley));
					var bdletterbox:BitmapData = new BitmapData(capturewidth, captureheight, false, 0);
					bdletterbox.copyPixels(bd, letterbox, new Point((capturewidth - (swf.width * scalex)) / 2, (captureheight - (swf.height * scaley)) / 2));
					bm = new Bitmap(bdletterbox);
				} else {	// Otherwise, copy the image as-is
					bm = new Bitmap(bd);
				}
				
				if (bm == null) {
					trace("Bitmap is null somehow.");
					return null;
				}
				
				return bm;
			}
			
			// Cancel the current file in the render queue
			private function cancelCurrentClicked():void {
				// Confirm the action with the user
				Alert.show("Are you sure you wish to cancel the current render job?", "Cancel current job?",
					Alert.YES | Alert.NO, this, cancelCurrentConfirmationHandler, null, Alert.NO);
			}
			// If the user wishes to cancel the current job...
			private function cancelCurrentConfirmationHandler(e:CloseEvent):void {
				if(e.detail == Alert.YES) {
					trace("The current render job has been cancelled.");
					// ...start preparing the next loop iteration.
					this.dispatchEvent(new Event(RENDER_CANCELLED));
				}
			}
			
			// Cancel the entire render process
			private function cancelAllClicked():void {
				// Confirm the action with the user
				Alert.show("Are you sure you wish to cancel all render jobs?", "Cancel all jobs?",
					Alert.YES | Alert.NO, this, cancelAllConfirmationHandler, null, Alert.NO);
			}
			// Once we've confirmed that the user wishes to cancel...
			private function cancelAllConfirmationHandler(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					trace("All render jobs have been cancelled.");
					// ...empty the file queue and shut down the window.
					filequeue = null;
					this.dispatchEvent(new Event(RENDER_CANCELLED));
				}
			}
			
			private function cancelAllRenders():void {
				this.removeEventHandlers();
			}
			private function cancelCurrentRender():void {
				cleanUpCurrentRender();
			}
			private function deleteImageEncoder():void {
				if (imageencoder) {
					imageencoder.removeEventListener(ThreadedEncoderEvent.START_ENCODE, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.HEADER_WRITTEN, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.DATA_CHUNK_WRITTEN, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.COMPLETE_DATA_WRITTEN, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.FOOTER_WRITTEN, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.ENCODE_COMPLETE, handleEvents);
					imageencoder.removeEventListener(ThreadedEncoderEvent.ENCODE_CANCELLED, handleEvents);
					imageencoder = null;
				}
			}
			private function removeEventHandlers():void {
				this.removeEventListener(RenderWindow.QUEUE_RECEIVED, startRender);
				this.removeEventListener(RenderWindow.INIT_COMPLETE, openSwfData);
				this.removeEventListener(RenderWindow.QUEUE_PROCESSED, handleEvents);
				this.removeEventListener(RenderWindow.RENDER_PREPARATION_COMPLETE, handleEvents);
				this.removeEventListener(RenderWindow.NEXT_FILE_OPENED, handleEvents);
				this.removeEventListener(RenderWindow.PREVIEW_UPDATED, handleEvents);
				this.removeEventListener(RenderWindow.RENDER_NEXT_FRAME, handleEvents);
				this.removeEventListener(RenderWindow.RENDER_COMPLETE, handleEvents);
				this.removeEventListener(RenderWindow.RENDER_CANCELLED, handleEvents);
				this.removeEventListener(RenderWindow.CANCEL_ALL_RENDERS, handleEvents);
			}
			
			// Close the window
			private function closeEvent():void {
				trace("Closing Render Dialogue window");
				
				this.dispatchEvent(new Event(CANCEL_ALL_RENDERS));
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	
	<mx:VBox id="container" width="100%" height="100%" horizontalAlign="center" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
		<mx:VBox width="320" height="180" maxWidth="320" maxHeight="180" horizontalAlign="center" verticalAlign="middle">
			<mx:Image id="previewImage" width="320" height="180" maxWidth="320" maxHeight="180" horizontalAlign="center" />
		</mx:VBox>
		<mx:ProgressBar id="progressBarCurrent" mode="manual" indeterminate="true" labelPlacement="center" width="100%" height="100%" minimum="0" maximum="0" label="Initialising..." />
		<mx:HRule />
		<mx:ProgressBar id="progressBarTotal" mode="manual" indeterminate="true" labelPlacement="center" width="100%" height="100%" minimum="0" maximum="0" label="Initialising..." />
		<mx:HBox width="100%" horizontalAlign="right">
			<mx:Button id="cancelCurrent" label="Cancel Current" click="cancelCurrentClicked()" enabled="false" />
			<mx:Button id="cancelAll" label="Cancel All" click="cancelAllClicked()" enabled="false" />
		</mx:HBox>
	</mx:VBox>
	<mx:SWFLoader id="loadedSWF" scaleContent="false" showBusyCursor="true" visible="false" includeInLayout="false" />
	
</s:TitleWindow>